generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models
model AIOutput {
  id           String   @id @default(uuid())
  userId       String 
  title        String?
  description  String
  templateUsed String
  createdAt    DateTime @default(now())
}

model Purchase {
  id       String   @id @default(uuid())
  userId   String
  credit   Float
  createAt DateTime @default(now())
}

model razorpayCustomer {
  id                 String   @id @default(uuid())
  userId             String   @unique
  razorpayCustomerId String   @unique
  createAt           DateTime @default(now())
}

model User {
  id          String   @id @unique @default(uuid())
  userId      String   @unique
  totalCredit Float    @default(10000)
  polls       Poll[]   // Relation to polls
  votes       Vote[]   // Relation to votes
}

// New models for polling system
model Poll {
  id          String     @id @default(uuid())
  title       String
  description String?
  createdBy   User       @relation(fields: [userId], references: [userId])
  userId      String
  isActive    Boolean    @default(true)
  creditCost  Float      @default(100)  // Credit cost to create a poll
  options     Option[]
  votes       Vote[]
  createdAt   DateTime   @default(now())
  expiresAt   DateTime?
}

model Option {
  id          String   @id @default(uuid())
  pollId      String
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  text        String
  imageUrl    String?
  votes       Vote[]
  createdAt   DateTime @default(now())
}

model Vote {
  id        String   @id @default(uuid())
  pollId    String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  optionId  String
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())

  @@unique([pollId, userId])  // Ensure one vote per poll per user
}